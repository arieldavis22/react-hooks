{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport speakersReducer from './speakersReducer';\nimport SpeakerData from './SpeakerData';\nimport { useEffect, useReducer } from 'react';\nimport axios from 'axios';\n\nfunction useSpeakerDataManager() {\n  _s();\n\n  var _useReducer = useReducer(speakersReducer, {\n    isLoading: true,\n    speakerList: []\n  }),\n      _useReducer$ = _useReducer[0],\n      isLoading = _useReducer$.isLoading,\n      speakerList = _useReducer$.speakerList,\n      dispatch = _useReducer[1];\n\n  function toggleSpeakerFavorite(speakerRec) {\n    var updataData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                axios.put(\"http://localhost:4000/speakers/\".concat(speakerRec.id), speakerRec);\n                speakerRec.favorite ? dispatch({\n                  type: \"unfavorite\",\n                  id: speakerRec.id\n                }) : dispatch({\n                  type: \"favorite\",\n                  id: speakerRec.id\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function updataData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    updataData();\n  }\n\n  useEffect(function () {\n    // new Promise(function (resolve) {\n    //     setTimeout(function () {\n    //         resolve();\n    //     }, 1000);\n    // }).then(() => {\n    //     dispatch({\n    //         type: \"setSpeakerList\",\n    //         data: SpeakerData\n    //     })\n    // });\n    var fetchData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios.get('http://localhost:4000/speakers');\n\n              case 2:\n                result = _context2.sent;\n                dispatch({\n                  type: 'setSpeakerList',\n                  data: result.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function fetchData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n    return function () {\n      console.log('cleanup');\n    };\n  }, []); // [speakingSunday, speakingSaturday]);\n\n  return {\n    isLoading: isLoading,\n    speakerList: speakerList,\n    toggleSpeakerFavorite: toggleSpeakerFavorite\n  };\n}\n\n_s(useSpeakerDataManager, \"F+Ednk2j12dDSrAEGSlgYiW16z0=\");\n\nexport default useSpeakerDataManager;","map":{"version":3,"sources":["/Users/arieldavis/Development/code/react-hooks/src/useSpeakerDataManager.js"],"names":["speakersReducer","SpeakerData","useEffect","useReducer","axios","useSpeakerDataManager","isLoading","speakerList","dispatch","toggleSpeakerFavorite","speakerRec","updataData","put","id","favorite","type","fetchData","get","result","data","console","log"],"mappings":";;;;;AAAA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,qBAAT,GAAiC;AAAA;;AAAA,oBACgBF,UAAU,CAACH,eAAD,EAAkB;AACrEM,IAAAA,SAAS,EAAE,IAD0D;AAErEC,IAAAA,WAAW,EAAE;AAFwD,GAAlB,CAD1B;AAAA;AAAA,MACrBD,SADqB,gBACrBA,SADqB;AAAA,MACVC,WADU,gBACVA,WADU;AAAA,MACIC,QADJ;;AAM7B,WAASC,qBAAT,CAA+BC,UAA/B,EAA2C;AACvC,QAAMC,UAAU;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AACfP,gBAAAA,KAAK,CAACQ,GAAN,0CAA4CF,UAAU,CAACG,EAAvD,GAA6DH,UAA7D;AACAA,gBAAAA,UAAU,CAACI,QAAX,GACAN,QAAQ,CAAC;AAACO,kBAAAA,IAAI,EAAE,YAAP;AAAqBF,kBAAAA,EAAE,EAAEH,UAAU,CAACG;AAApC,iBAAD,CADR,GAEAL,QAAQ,CAAC;AAACO,kBAAAA,IAAI,EAAE,UAAP;AAAmBF,kBAAAA,EAAE,EAAEH,UAAU,CAACG;AAAlC,iBAAD,CAFR;;AAFe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAVF,UAAU;AAAA;AAAA;AAAA,OAAhB;;AAMAA,IAAAA,UAAU;AACb;;AAEDT,EAAAA,SAAS,CAAC,YAAM;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMc,SAAS;AAAA,2EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACKZ,KAAK,CAACa,GAAN,CAAU,gCAAV,CADL;;AAAA;AACVC,gBAAAA,MADU;AAEdV,gBAAAA,QAAQ,CAAC;AAACO,kBAAAA,IAAI,EAAE,gBAAP;AAAyBI,kBAAAA,IAAI,EAAED,MAAM,CAACC;AAAtC,iBAAD,CAAR;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAATH,SAAS;AAAA;AAAA;AAAA,OAAf;;AAIAA,IAAAA,SAAS;AAET,WAAO,YAAM;AACTI,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH,KAFD;AAGD,GApBM,EAoBJ,EApBI,CAAT,CAhB6B,CAoCnB;;AACV,SAAO;AAAEf,IAAAA,SAAS,EAATA,SAAF;AAAaC,IAAAA,WAAW,EAAXA,WAAb;AAA0BE,IAAAA,qBAAqB,EAArBA;AAA1B,GAAP;AACH;;GAtCQJ,qB;;AAwCT,eAAeA,qBAAf","sourcesContent":["import speakersReducer from './speakersReducer';\nimport SpeakerData from './SpeakerData';\nimport { useEffect, useReducer } from 'react';\nimport axios from 'axios';\n\nfunction useSpeakerDataManager() {\n    const [{isLoading, speakerList}, dispatch] = useReducer(speakersReducer, {\n        isLoading: true,\n        speakerList: []\n    })\n\n    function toggleSpeakerFavorite(speakerRec) {\n        const updataData = async function() {\n            axios.put(`http://localhost:4000/speakers/${speakerRec.id}`, speakerRec)\n            speakerRec.favorite ?\n            dispatch({type: \"unfavorite\", id: speakerRec.id}) :\n            dispatch({type: \"favorite\", id: speakerRec.id})\n        }\n        updataData()\n    }\n    \n    useEffect(() => {\n        // new Promise(function (resolve) {\n        //     setTimeout(function () {\n        //         resolve();\n        //     }, 1000);\n        // }).then(() => {\n        //     dispatch({\n        //         type: \"setSpeakerList\",\n        //         data: SpeakerData\n        //     })\n        // });\n        const fetchData = async function() {\n            let result = await axios.get('http://localhost:4000/speakers')\n            dispatch({type: 'setSpeakerList', data: result.data})\n        }\n        fetchData()\n\n        return () => {\n            console.log('cleanup');\n        };\n      }, []); // [speakingSunday, speakingSaturday]);\n    return { isLoading, speakerList, toggleSpeakerFavorite }\n}\n\nexport default useSpeakerDataManager;"]},"metadata":{},"sourceType":"module"}